/* automatically generated by rust-bindgen 0.66.1 */

pub type R_xlen_t = isize;
pub type SEXP = *mut SEXPREC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SEXPREC {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wk_meta_t {
    pub geometry_type: u32,
    pub flags: u32,
    pub srid: u32,
    pub size: u32,
    pub precision: f64,
    pub bounds_min: [f64; 4usize],
    pub bounds_max: [f64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wk_vector_meta_t {
    pub geometry_type: u32,
    pub flags: u32,
    pub size: R_xlen_t,
    pub bounds_min: [f64; 4usize],
    pub bounds_max: [f64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wk_handler_t {
    pub api_version: ::std::os::raw::c_int,
    pub dirty: ::std::os::raw::c_int,
    pub handler_data: *mut ::std::os::raw::c_void,
    pub initialize: ::std::option::Option<
        unsafe extern "C" fn(
            dirty: *mut ::std::os::raw::c_int,
            handler_data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub vector_start: ::std::option::Option<
        unsafe extern "C" fn(
            meta: *const wk_vector_meta_t,
            handler_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub feature_start: ::std::option::Option<
        unsafe extern "C" fn(
            meta: *const wk_vector_meta_t,
            feat_id: R_xlen_t,
            handler_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub null_feature: ::std::option::Option<
        unsafe extern "C" fn(handler_data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub geometry_start: ::std::option::Option<
        unsafe extern "C" fn(
            meta: *const wk_meta_t,
            part_id: u32,
            handler_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub ring_start: ::std::option::Option<
        unsafe extern "C" fn(
            meta: *const wk_meta_t,
            size: u32,
            ring_id: u32,
            handler_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub coord: ::std::option::Option<
        unsafe extern "C" fn(
            meta: *const wk_meta_t,
            coord: *const f64,
            coord_id: u32,
            handler_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub ring_end: ::std::option::Option<
        unsafe extern "C" fn(
            meta: *const wk_meta_t,
            size: u32,
            ring_id: u32,
            handler_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub geometry_end: ::std::option::Option<
        unsafe extern "C" fn(
            meta: *const wk_meta_t,
            part_id: u32,
            handler_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub feature_end: ::std::option::Option<
        unsafe extern "C" fn(
            meta: *const wk_vector_meta_t,
            feat_id: R_xlen_t,
            handler_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub vector_end: ::std::option::Option<
        unsafe extern "C" fn(
            meta: *const wk_vector_meta_t,
            handler_data: *mut ::std::os::raw::c_void,
        ) -> SEXP,
    >,
    pub Rf_error: ::std::option::Option<
        unsafe extern "C" fn(
            message: *const ::std::os::raw::c_char,
            handler_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub deinitialize:
        ::std::option::Option<unsafe extern "C" fn(handler_data: *mut ::std::os::raw::c_void)>,
    pub finalizer:
        ::std::option::Option<unsafe extern "C" fn(handler_data: *mut ::std::os::raw::c_void)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wk_trans_t {
    pub api_version: ::std::os::raw::c_int,
    pub trans_data: *mut ::std::os::raw::c_void,
    pub use_z: ::std::os::raw::c_int,
    pub use_m: ::std::os::raw::c_int,
    pub xyzm_out_min: [f64; 4usize],
    pub xyzm_out_max: [f64; 4usize],
    pub trans: ::std::option::Option<
        unsafe extern "C" fn(
            feature_id: R_xlen_t,
            xyzm_in: *const f64,
            xyzm_out: *mut f64,
            trans_data: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub vector_end:
        ::std::option::Option<unsafe extern "C" fn(trans_data: *mut ::std::os::raw::c_void)>,
    pub finalizer:
        ::std::option::Option<unsafe extern "C" fn(trans_data: *mut ::std::os::raw::c_void)>,
}
pub const WK_CONTINUE: u32 = 0;
pub const WK_ABORT: u32 = 1;
pub const WK_ABORT_FEATURE: u32 = 2;
pub const WK_FLAG_HAS_BOUNDS: u32 = 1;
pub const WK_FLAG_HAS_Z: u32 = 2;
pub const WK_FLAG_HAS_M: u32 = 4;
pub const WK_FLAG_DIMS_UNKNOWN: u32 = 8;
pub const WK_PRECISION_NONE: f64 = 0.0;
pub const WK_PART_ID_NONE: u32 = 4294967295;
pub const WK_SIZE_UNKNOWN: u32 = 4294967295;
pub const WK_VECTOR_SIZE_UNKNOWN: i32 = -1;
pub const WK_SRID_NONE: u32 = 4294967295;
#[test]
fn bindgen_test_layout_wk_meta_t() {
    const UNINIT: ::std::mem::MaybeUninit<wk_meta_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wk_meta_t>(),
        88usize,
        concat!("Size of: ", stringify!(wk_meta_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wk_meta_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wk_meta_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_meta_t),
            "::",
            stringify!(geometry_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_meta_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_meta_t),
            "::",
            stringify!(srid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_meta_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).precision) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_meta_t),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds_min) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_meta_t),
            "::",
            stringify!(bounds_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds_max) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_meta_t),
            "::",
            stringify!(bounds_max)
        )
    );
}
#[test]
fn bindgen_test_layout_wk_vector_meta_t() {
    const UNINIT: ::std::mem::MaybeUninit<wk_vector_meta_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wk_vector_meta_t>(),
        80usize,
        concat!("Size of: ", stringify!(wk_vector_meta_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wk_vector_meta_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wk_vector_meta_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_vector_meta_t),
            "::",
            stringify!(geometry_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_vector_meta_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_vector_meta_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds_min) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_vector_meta_t),
            "::",
            stringify!(bounds_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds_max) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_vector_meta_t),
            "::",
            stringify!(bounds_max)
        )
    );
}
#[test]
fn bindgen_test_layout_wk_handler_t() {
    const UNINIT: ::std::mem::MaybeUninit<wk_handler_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wk_handler_t>(),
        128usize,
        concat!("Size of: ", stringify!(wk_handler_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wk_handler_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wk_handler_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(api_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(dirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(handler_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector_start) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(vector_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feature_start) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(feature_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).null_feature) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(null_feature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry_start) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(geometry_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_start) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(ring_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coord) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(coord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ring_end) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(ring_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry_end) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(geometry_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feature_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(feature_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector_end) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(vector_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rf_error) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(Rf_error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deinitialize) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(deinitialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finalizer) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_handler_t),
            "::",
            stringify!(finalizer)
        )
    );
}
#[test]
fn bindgen_test_layout_wk_trans_t() {
    const UNINIT: ::std::mem::MaybeUninit<wk_trans_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wk_trans_t>(),
        112usize,
        concat!("Size of: ", stringify!(wk_trans_t))
    );
    assert_eq!(
        ::std::mem::align_of::<wk_trans_t>(),
        8usize,
        concat!("Alignment of ", stringify!(wk_trans_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).api_version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_trans_t),
            "::",
            stringify!(api_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trans_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_trans_t),
            "::",
            stringify!(trans_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_z) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_trans_t),
            "::",
            stringify!(use_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_m) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_trans_t),
            "::",
            stringify!(use_m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xyzm_out_min) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_trans_t),
            "::",
            stringify!(xyzm_out_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xyzm_out_max) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_trans_t),
            "::",
            stringify!(xyzm_out_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trans) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_trans_t),
            "::",
            stringify!(trans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector_end) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_trans_t),
            "::",
            stringify!(vector_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finalizer) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(wk_trans_t),
            "::",
            stringify!(finalizer)
        )
    );
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum wk_geometery_type_enum {
    WK_GEOMETRY = 0,
    WK_POINT = 1,
    WK_LINESTRING = 2,
    WK_POLYGON = 3,
    WK_MULTIPOINT = 4,
    WK_MULTILINESTRING = 5,
    WK_MULTIPOLYGON = 6,
    WK_GEOMETRYCOLLECTION = 7,
}
extern "C" {
    pub fn wk_handler_create() -> *mut wk_handler_t;
}
extern "C" {
    pub fn wk_handler_create_xptr(handler: *mut wk_handler_t, tag: SEXP, prot: SEXP) -> SEXP;
}
extern "C" {
    pub fn wk_handler_destroy(handler: *mut wk_handler_t);
}
extern "C" {
    pub fn wk_handler_run_xptr(
        read_fun: ::std::option::Option<
            unsafe extern "C" fn(read_data: SEXP, handler: *mut wk_handler_t) -> SEXP,
        >,
        read_data: SEXP,
        xptr: SEXP,
    ) -> SEXP;
}
extern "C" {
    pub fn wk_trans_create() -> *mut wk_trans_t;
}
extern "C" {
    pub fn wk_trans_create_xptr(trans: *mut wk_trans_t, tag: SEXP, prot: SEXP) -> SEXP;
}
extern "C" {
    pub fn wk_trans_destroy(trans: *mut wk_trans_t);
}
